#include "TIS.h"
#include "Poco.h"
#include "Poco_Impl.h"
#include "TISDB.h"
#include "util.h"

#include <Core/Core.h>

using namespace Upp;

/*
	print params on http
*/
String PrintParams(Http& http)
{

	
	int count = http.GetParamCount();
	Vector<String> v;
	for ( int i = 0; i < http.GetParamCount(); i++ ) v.Add(http[i]);
	
	// get current path
	v.Add(SkylarkApp::Config().path);
	
	String json = StoreAsJson(v, true);
	//---------------------------------

	//http<<json;
	return json;
}




/*
	Api test
*/
SKYLARK ( ApiTest, "api/**" )
{
	DataPacket< String > data;
	data.Status = "Ready";
	data.IsError = true;

	for ( int i = 0; i < http.GetParamCount(); i++ )
		data.Data.Add (  http[i] );
	
	http << StoreAsJson ( data, true );
}

/*
	template Create
*/
template <typename T>
String tCreate(Http &http)
{
	PrintParams(http); // params
		
	T obj;
	obj = obj.Create(http);
	//-----------------------------------------
	DataPacket<T> packet;
	
	if(obj.data.ID > 0) 
	{
		packet.Data.Add(obj);
	}
	else
	{
		packet.SetError("Can not Create ");
	}
	http << StoreAsJson(packet);
}

/*
	template Update
*/
template <typename T>
String tUpdate(Http &http)
{
	PrintParams(http); // params
	
	T obj;
	
	obj = obj.Edit(http);
	//------------------------------------------
	DataPacket<T> packet;
	
	if(obj.data.ID > 0) 
	{
		packet.Data.Add(obj);
	}
	else
	{
		packet.SetError("Can not update ");
	}
	
	http << StoreAsJson(packet);
}

/*
	template Get
*/
template <typename T>
String tGet(Http &http)
{
	PrintParams(http); // params
		
	T obj;
	//------------------------------------------
	DataPacket<T> packet;
	
	packet.Data = obj.Retrieve(http);
	
	http << StoreAsJson(packet);
}


/*
	create a user
	http://127.0.0.1:8001/tis/api/user/create?EMAIL=user@simaget.com&PASSWORD=1234&APIKEY=&FULLNAME=TISUSER&PHONE=123456789&DATEOFBIRTH=2018/01/01&STATUS=1&ISADMIN=0
*/
SKYLARK ( usercreate, "api/user/create" )
{
	tCreate<D_USERINFO>(http);
}

/*
	update a user
	http://127.0.0.1:8001/tis/api/user/update/09876?EMAIL=user@simaget.com&PASSWORD=1234&APIKEY=&FULLNAME=TISUSER&PHONE=123456789&DATEOFBIRTH=2018/01/01&STATUS=1&ISADMIN=0
*/
SKYLARK ( userupdate, "api/user/update/*" )
{
	// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tUpdate<D_USERINFO>(http);
	/*
	D_USERINFO user;
	
	user = user.Edit(http);
	//------------------------------------------
	Vector<D_USERINFO>  vector;
	if(user.data.ID > 0) vector.Add(user);
	http << StoreAsJson(vector);
	*/
}
/*
	get a list of user based on the condition
	ex: ID, EMAIL, FULLNAME, APIKEY
		http://127.0.0.1:8001/tis/api/user/get/1234?FULLNAME=user
*/
SKYLARK ( userget, "api/user/get/*" )
{
	PrintParams(http);
	// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tGet<D_USERINFO>(http);
}

/*
	login api
	ex:
		view-source:http://127.0.0.1:8001/tis/api/user/login?USERNAME=user&PASSWORD=1234
*/
SKYLARK ( userlogin, "api/user/login" )
{
	D_USERINFO user;
	user = user.Login(http);
	//------------------------------------------
	DataPacket<D_USERINFO> packet;
	
	if(user.data.ID > 0)
	{
		packet.Data.Add(user);
		if(user.data.ISADMIN==true)
			packet.Status ="admin";
		else
			packet.Status ="user";
		//
		http.NewSessionId();	
		http.NewIdentity();
		//-----------------------------------------------------------
		String identity = AsString(http[".__identity__"]);
		int64 session = 0;
		session = user.GetHashValue(identity);

		// set session for apikey
		http.SessionSet(".LOGAPIKEY", user.data.APIKEY);
		
		
		// update session for this user
		user.data.SESSION = session;
		user.Edit(user.data);
		
		LOG(user.data);
	}
	else
	{
		packet.SetError("Can not login. Try again!!", StoreAsJson(user));
		packet.Status = "login";
	
	}
	http << StoreAsJson(packet, true);
}

/*

*/
SKYLARK ( usersettingcreate, "api/usersetting/create" )
{
	// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tCreate<D_USERSETTING>(http);
	
	
}

/*
	update a user
	http://127.0.0.1:8001/tis/api/usersetting/update/09876?EMAIL=user@simaget.com&PASSWORD=1234&APIKEY=&FULLNAME=TISUSER&PHONE=123456789&DATEOFBIRTH=2018/01/01&STATUS=1&ISADMIN=0
*/
SKYLARK ( usersettingupdate, "api/usersetting/update/*" )
{
	// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tUpdate<D_USERSETTING>(http);

}

/*

*/
SKYLARK ( usersettingget, "api/usersetting/get/*" )
{
	PrintParams(http);
	// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	D_USERSETTING d;
	Vector<D_USERSETTING> v=d.Retrieve(http);
	if(v.GetCount()==0)
	{
		int uid= atoi(AsString(http["APIKEY"]));
		D_USERINFO u;
		u=u.GetByApiKey(uid);
		
		if(u.data.ID>0)
		{
			d.data.USERID = u.data.ID;
			d.data.FILEEXTENSION = "png jpg bmp";
			d.data.MAXFILESIZE = 10;
			d.Create(d.data);
		}
	}
	
	tGet<D_USERSETTING>(http);
}

/*

*/
SKYLARK ( adminsettingcreate, "api/adminsetting/create" )
{
	PrintParams(http);
	// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tCreate<D_ADMINSETTING>(http);
}

/*
	update a admin
	http://127.0.0.1:8001/tis/api/adminsetting/update/09876?EMAIL=user@simaget.com&PASSWORD=1234&APIKEY=&FULLNAME=TISUSER&PHONE=123456789&DATEOFBIRTH=2018/01/01&STATUS=1&ISADMIN=0
*/
SKYLARK ( adminsettingupdate, "api/adminsetting/update/*" )
{
	PrintParams(http);
		// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tUpdate<D_ADMINSETTING>(http);
}

/*

*/
SKYLARK ( adminsettingget, "api/adminsetting/get/*" )
{
		// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tGet<D_ADMINSETTING>(http);
}

//-----------------------------------------------------------------

/*
	image file
*/
SKYLARK ( imagefilecreate, "api/imagefile/create" )
{
	PrintParams(http);
		// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tCreate<D_IMAGEFILE>(http);
}

/*
	update a image file
*/
SKYLARK ( imagefileupdate, "api/imagefile/update/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tUpdate<D_IMAGEFILE>(http);
}

/*
	get image file
*/
SKYLARK ( imagefileget, "api/imagefile/get/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tGet<D_IMAGEFILE>(http);
}
//-----------------------------------------------------------------
/*
	Daily Summary
*/
SKYLARK ( dailysummarycreate, "api/dailysummary/create" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tCreate<D_DAILYSUMMARY>(http);
}

/*
	update a Daily Summary
*/
SKYLARK ( dailysummaryupdate, "api/dailysummary/update/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tUpdate<D_DAILYSUMMARY>(http);
}

/*
	get Daily Summary
*/
SKYLARK ( dailysummaryget, "api/dailysummary/get/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	tGet<D_DAILYSUMMARY>(http);
}
//---------------------------------------------------------------
/*
	Backup Restore Task
*/
SKYLARK ( backuprestoretaskcreate, "api/backuprestoretask/create/*" )
{
	PrintParams(http);
		// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
    tCreate<D_BACKUPRESTORETASK>(http);
	
}

/*
	update a Backup Restore Task
*/
SKYLARK ( backuprestoretaskupdate, "api/backuprestoretask/update/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	tUpdate<D_BACKUPRESTORETASK>(http);
	
}

/*
	get Backup Restore Task
*/
SKYLARK ( backuprestoretaskget, "api/backuprestoretask/get/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	tGet<D_BACKUPRESTORETASK>(http);
}

//---------------------------------------------------------------------
/*
	Transformation Setting
*/
SKYLARK ( transfomationsettingcreate, "api/transfomationsetting/create" )
{
	PrintParams(http);
	tCreate<D_TRANSFORMATIONSETTING>(http);
}

/*
	update a Transformation Setting
*/
SKYLARK ( transfomationsettingupdate, "api/transfomationsetting/update/*" )
{
	PrintParams(http);
	tUpdate<D_TRANSFORMATIONSETTING>(http);
}

/*
	get Transformation Setting
*/
SKYLARK ( transfomationsettingget, "api/transfomationsetting/get/*" )
{
	PrintParams(http);
	tGet<D_TRANSFORMATIONSETTING>(http);
}

//------------------------------------------------------------------------
/*
	Transformation Task
*/
SKYLARK ( transformationtaskcreate, "api/transformationtask/create" )
{
	PrintParams(http);
//	tCreate<D_TRANSFORMATIONTASK>(http);
}

/*
	update a Transformation Task
*/
SKYLARK ( transformationtaskupdate, "api/transformationtask/update/*" )
{
	PrintParams(http);
//	tUpdate<D_TRANSFORMATIONTASK>(http);
}

/*
	get Transformation Task
*/
SKYLARK ( transformationtaskget, "api/transformationtask/get/*" )
{
	PrintParams(http);
//	tGet<D_TRANSFORMATIONTASK>(http);
}

/*
	Upload file
*/


/*
	Download file
*/
SKYLARK ( share, "api/share/**" )
{
	String json = PrintParams(http);

	bool isError= true;	
	
	// get User ID and check
	try
	{
		// check user apikey
		D_USERINFO user;
		user = user.GetByApiKey(http);
		
		// check image status
		D_IMAGEFILE image;
		String filename = http[1]; // filename
		image= image.GetByFileName(filename);
		
		bool isValidImage = image.data.ID > 0 && image.data.STATUS==1;
		bool isValidUser = user.data.ID > 0 && user.data.ID == image.data.USERID;
		
		if(isValidUser && isValidImage)
		{
			//----------------------------------------
			//update daily summary
			D_DAILYSUMMARY daily;
			daily.UpdateDownload(user.data.ID, image.data.FILESIZE);
			 
			//----------------------------------------
			isError=false;
			String path=SkylarkApp::Config().path;
			String filepath = GetFileOnPath(image.data.REALFILEPATH, SkylarkApp::Config().path, true);
	
			http.Content(image.data.FILETYPE, LoadFile(filepath));
		}
		else
		{
			String filepath = GetFileOnPath("no.png", SkylarkApp::Config().path, true);
			http.Content(image.data.FILETYPE, LoadFile(filepath));
		}
	}
	catch(...){
		Cout()<<"Error: api share";
	}
	
	
	// if has error send default file
	if(isError==true)
	{
			String filepath = GetFileOnPath("no.png", SkylarkApp::Config().path, true);
		if(!filepath.GetCount()) {
			http.Response(404, "Not found");
			return;
		}
		
			http.Content("image/png", LoadFile(filepath));
	
	}

}

/*
	get backups, downloads, total files, total users
*/
SKYLARK ( adminsummary, "api/summary/*" )
{
	PrintParams(http);
	
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	


	try
	{
		// get total files
		D_IMAGEFILE image;
		int totalfiles = image.GetSummary();
		// get users
		D_USERINFO user;
		int totalusers = user.GetSummary();
		// get download
		D_DAILYSUMMARY daily;
		int totaldownloads = daily.GetDailyDownload();
		// get backup
		D_BACKUPRESTORETASK backup;
		int totalbackups = backup.GetSummary();
	
		Jsonew vm;
		vm 
		("Backups",AsString(totalbackups) )
		("Downloads",AsString(totaldownloads))
		("Users",AsString(totalusers))
		("Files",AsString(totalfiles))
		;
		
		packet.Data.Add(vm);
		
	}
	catch(...)
	{
		packet.IsError = true;
	}
	
	http << StoreAsJson(packet, true);
}

/*
	get download statistics
*/
SKYLARK ( downloadstatictis, "api/download/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	
	D_DAILYSUMMARY summary;
	packet.Data = summary.GetMonthlyDownload(http);
	http << StoreAsJson(packet);
}


/*
	admin disk usage
*/
SKYLARK ( admindiskusage, "api/diskusage/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------

	packet.Data = GetDrivesInfo();
	http<< StoreAsJson(packet, true);
}

/*
	admin total users usage
*/
SKYLARK ( adminuserstotal, "api/userstotal/*" )
{
	PrintParams(http);
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, true)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------

	
	packet.Data = user.GetUsersTotal();
	http<< StoreAsJson(packet, true);
}

/*
	user files owned 
*/
SKYLARK ( filestotal, "api/filestotal/*" )
{
	PrintParams(http);
	
			// validation
	DataPacket< Jsonew > packet;
	D_USERINFO user;
	if(user.ValidateUserApiKey(http, false)==false)
	{
		packet.SetError("login","Please login");
		http<< StoreAsJson(packet, true);
		return;
	}
	//--------------------------------------------------
	
	
	
	D_IMAGEFILE image;

	packet.Data = image.GetFilesTotal(http);
	http<< StoreAsJson(packet, true);
}

SKYLARK ( Info, "info" )
{
	Jsonew json;
		String dbFile =NormalizePath( AppendFileName(GetCurrentDirectory(), DBFILE));
	json
		("DB",dbFile)
		("Config path",ConfigFile())
		("Current",GetCurrentDirectory())
		("Local file",NormalizePath("."))
		("Skylark path", SkylarkApp::Config().path)
		;
	
	http<<StoreAsJson(json, true);
}

SKYLARK ( Recovery, "api/recovery/*" )
{
		Cout()<<"\n Starting Recovery \n";
		Cout()<<"\n Normalize path "<< NormalizePath("./") << "\n";
		
	// clean data base
	String command= http[0];
	if(command == "FLASH")
	{
		SQL * Delete(USERINFO).Where(ID>0);
		SQL * Delete(USERSETTING).Where(ID>0);
		SQL * Delete(IMAGEFILE).Where(ID>0);
		SQL * Delete(ADMINSETTING).Where(ID>0);
		SQL * Delete(DAILYSUMMARY).Where(ID>0);
		SQL * Delete(TRANSFORMATIONSETTING).Where(ID>0);
		SQL * Delete(TRANSFORMATIONTASK).Where(ID>0);
		
		//----------------
		String mail ="1234";
		int hash = CombineHash ( mail, 10 + mail.GetCount() );
		
		
		D_USERINFO user;
		hash = user.GetHashValue("1234");// default pass
		
		user.data.FULLNAME="TIS Admin";
		user.data.EMAIL="admin@simaget.com";
		user.data.PASSWORD=AsString(hash);
		user.data.APIKEY=999;
		user.data.PHONE="123456789";
		user.data.DATEOFBIRTH="2019/01/01";
		user.data.STATUS=1;
		user.data.ISADMIN=1;
		
		Cout()<<StoreAsJson(user.Create(user.data), true);				
					

		D_ADMINSETTING asetting;
		
		asetting.data.ROOTPATH = "tis";
		asetting.data.STATICPATH = "./TISDATA";
		asetting.data.IMAGEPATH = "USERS";
		asetting.data.BACKUPPATH = "BACKUP";
		asetting.data.SERVERPORT = "8001";
		asetting.data.HOSTNAME = "www.simaget.com";
		
					
		Cout()<<StoreAsJson(asetting.Create(asetting.data), true);			
			
		
		user.data.FULLNAME="TIS User";
		user.data.EMAIL="user@simaget.com";
		user.data.PASSWORD=AsString(hash);
		user.data.APIKEY=user.GetHashValue(user.data.EMAIL);
		user.data.PHONE="123456789";
		user.data.DATEOFBIRTH="2019/01/01";
		user.data.STATUS=1;
		user.data.ISADMIN=0;
		
		Cout() <<StoreAsJson(user.Create(user.data), true);				
	}
	
	if(command =="ADMIN")
	{
		D_USERINFO user;
		int hash = user.GetHashValue("1234");// default pass
		SQL * Update(USERINFO)("PASSWORD",hash).Where(ISADMIN == 1);
	}
	
	http<< "<h1>TIS Recovery Done!! ";
}