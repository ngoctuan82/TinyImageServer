/*
	This section of code get from U++ library
	https://www.ultimatepp.org/examples$SkylarkUpload$en-us.html
	modified by Ngoc Tuan Nguyen
*/

#include "TIS.h"
#include "Poco.h"
#include "Poco_Impl.h"
#include "TISDB.h"
#include <Core/Core.h>

using namespace Upp;

String TraceParams(Http& http)
{
	LOG(GetSysTime());
	LOG(GetSysTime().Get());
	
	int count = http.GetParamCount();
	Vector<String> v;
	for ( int i = 0; i < http.GetParamCount(); i++ ) v.Add(http[i]);
	
	// get current path
	v.Add(SkylarkApp::Config().path);
	
	String json = StoreAsJson(v, true);
	//---------------------------------
	Cout()<<(json);
	//http<<json;
	return json;
}


int ProgressHandler(int reason, Http &http, int size)
{
	// get the upload unique identifier
	String id = http["uploadid"];
	String currentId = "." + id + ".currentSize";
	String totalId = "." + id + ".totalSize";
	
	

	// must be reentrant
	INTERLOCKED {
		switch(reason)
		{
			// got headers ?
			case PROGRESS_HEADER:
			{
				http
					.SessionSet(currentId, 0)
					.SessionSet(totalId, size)
				;
				break;
			}
				
			// reading contents ?
			case PROGRESS_CONTENT:
			{
				int oldPercent = http[currentId];
				int total = http[totalId];

				// take care to NOT return 100% up to upload ended really
				int percent = min(99, (int)(100.0 * size / total));
				
				// avoid unnnedded session storing
				if(oldPercent != percent)
					http.SessionSet(currentId, percent);
				break;
			}
				
			// finished reading contents ?
			case PROGRESS_END:
			{
				// signals end by resetting total size
				http.SessionSet(totalId, 0);
				break;
			}
			
			// default, used by query handler
			default: // PROGRESS_QUERY
			{
				// check if key is there --> upload started
				int total = http[totalId];
				Cout()<<"\nTotal:"<<total << "\n";
				if(!IsNull(total))
				{
					if(total)
						// if upload not ended, return the progress %
						return http[currentId];
					else
					{
						// upload ended, nullify session variables and return 100%
						http
							.SessionSet(currentId, Null)
							.SessionSet(totalId, Null)
						;
						return 100;
					}
				}
				else
					// upload still not started, return 0 progress
					return 0;
			}
		}
	}
	return true;
}


SKYLARK_PROGRESS(PostUpload, "upload:POST", &ProgressHandler)
{
	TraceParams(http);
	
	



	Value const &contents = http["filestoupload[]"];
	Value const &filenames = http["filestoupload.filename[]"];
	Value const &apikeystr = http["APIKEY"];
	Value const &sessionstr = http["@__skylark_session_cookie__"];
	
	
	if(contents.IsNull() || filenames.IsNull())
		return;
	// check who upload these files
	int apikey = atoi(AsString(apikeystr));
	D_USERINFO user;
	user = user.GetByApiKey(apikey);
	
	if(user.data.ID < 0) {
		String message="This APIKEY not allow to upload ";
		
		Cout()<<message<< apikey;
		return; // dont allow anonym upload
	}
	else
	{
		int session = ScanInt( AsString( sessionstr ),NULL, 16);
		if(session != user.data.SESSION)
		{
	//		Cout()<<"This SESSION not allow to upload "<< apikey;
	//		return; // dont allow expire session upload
		}
	}
	//--------------------------------------------------------------------------
	String userpath = AppendFileName("USERS", AsString(user.data.ID));
	Time time = GetSysTime();
	
	// start saving
	for(int i = 0; i < contents.GetCount(); i++)
	{
		String filename=(String)filenames[i];
		unsigned int hash=CombineHash ( filename, time.second );
		String namehash = AsString(hash);
		
		String FileExt = GetFileExt(filename);
		int Size = contents[i].GetCount();
		
		String FileName = namehash + FileExt;
		String FilePath = AppendFileName(userpath, FileName);
		
		String savepath = AppendFileName(GetCurrentDirectory(), userpath);
		savepath = AppendFileName(savepath, FileName);
		
		Cout()<<"\n Save File "<< savepath << "\n";
		Cout()<<"\n Normalize path "<< NormalizePath("./") << "\n";
		if(RealizePath(savepath))
		{	
		
			if(SaveFile(savepath, contents[i]))
			{
				// check size 
				D_USERSETTING us;
				us = us.GetByUserId(user.data.ID);
				// get save file size
				int64 size = GetFileLength(savepath);
				int mbsize = size/(1024*1024);
				if(us.data.MAXFILESIZE >= mbsize || us.data.MAXFILESIZE==0)
				{
					// create ImageFile
					S_IMAGEFILE simage;
						simage.USERID = user.data.ID;	
						simage.FILENAME = namehash;//(String)filenames[i];
						simage.MODIFIEDDATE = GetSysDate().Get(); // get date scalar
						simage.FILETYPE = FileExt;
						simage.FILESIZE = size;
						simage.REALFILEPATH = FilePath;
						simage.TAG = filename;
						simage.DESCRIPTION =  filename;
						simage.STATUS =  1;
					//----------------------
					D_IMAGEFILE image;
					image.Create(simage);
					
					LOG(" Saved File ");
				}
				else
				{
					LOG(" File bigger than limitation ");
					LOG(size);
					LOG(us.data.MAXFILESIZE );
					
					
					FileDelete(savepath);
				}
				
			}
			else
			{
				LOG("Can not save file ");
			}
		}
	}
}

SKYLARK(Progress,"progress")
{
	int p = ProgressHandler(PROGRESS_QUERY, http, 0);
	http.Content("text/plain", Format("%d", p));
	http.Response(200, "OK");
}

SKYLARK(uploadpage, "uploadfile")
{
	String rootPath = GetHomeDirectory();
	// we need a session variable for upload id
	if(http["@__skylark_session_cookie__"].IsNull())
		http.NewSessionId(); 
	//-----------------------------------------------
	Value session =  http["@__skylark_session_cookie__"];
	int apikey = atoi(AsString(http["APIKEY"]));
	
	//-------------------------------------------------
	http("APIKEY",apikey).RenderResult("witz/upload");
}